dat <- data.frame(ID=c(1:5),drug_A,drug_A_mg,drug_B,drug_B_mg,drug_C,drug_C_mg)
drug_name <- c("A","B","C")
index <- matrix(0,nc=2,nr=length(drug_name))
for (i in 1:length(drug_name)){
index[i,1] <- which(colnames(dat)==paste("drug_",drug_name[i],sep=""))
index[i,2] <- which(colnames(dat)==paste("drug_",drug_name[i],"_mg",sep=""))
}
index
index <- data.frame(name=drug_name,index)
index
dim(dat)[1]
dim(index)[1]
index[j,2]
dat[i,index[j,2]]==1
as.character(index[j,1])
dat[i,index[j,3]]
for(i in 1:dim(dat)[1]){
for (j in 1:dim(index)[1]){
if (dat[i,index[j,2]]==1){
dat.dr[i] <- as.character(index[j,1])
dat.mg[i] <- dat[i,index[j,3]]
}
}
}
dat2 <- data.frame(dat$ID,drug_name=dat.dr,drug_mg=dat.mg)
x <- read.csv("StatesData.csv")
View(x)
x <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F)
View(x)
x <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F, comment.char = "#")
View(x)
x[1,]
x <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F, comment.char = "# ")
x <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F, comment.char = "#")
View(x)
x <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F)
View(x)
x <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F,comment.char = "#")
View(x)
x <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F)
x0 <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F)
View(x0)
x1 <- x0[c(4:dim(x0)[1]), c(2:dim(x0)[2])]
View(x1)
x0 <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F)
x1 <- x0[c(5:dim(x0)[1]), c(2:dim(x0)[2])]
View(x1)
x0 <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F, na.strings = T)
View(x0)
x0 <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F, na.strings = T)
x1 <- x0[c(5:dim(x0)[1]), c(2:dim(x0)[2])]
x0 <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F, blank.lines.skip =T)
x1 <- x0[c(5:dim(x0)[1]), c(2:dim(x0)[2])]
x0 <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F)
View(x0)
x1 <- x0[c(5:dim(x0)[1]), c(2:10)]
View(x1)
View(x0)
colnames(x1) <- x0[,c(4, c(2:10)]
colnames(x1) <- x0[4, c(2:10)]
View(x1)
View(x1)
View(x0)
colnames(x1) <- x0[4, c(2:10)]
rownames(x1) <- x0[c(5:dim(x0)[1]), 1]
x0[c(5:dim(x0)[1]), 1]
View(x0)
colnames(x1) <- x0[4, c(2:10)]
rownames(x1) <- x0[c(5:55, 1]
colnames(x1) <- x0[4, c(2:10)]
rownames(x1) <- x0[c(5:55, 1)]
colnames(x1) <- x0[4, c(2:10)]
rownames(x1) <- x0[c(5:55), 1]
rownames(x1)
x0[c(5:55), 1]
View(x1)
is.na[x0]
x0 <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F)
is.na(x0)
is.null(x0)
!is.na(x0)
colSums(!is.na(x0))
which(colSums(!is.na(x0))==0)
x0[-which(colSums(!is.na(x0))==0)]
x0[-which(colSums(!is.na(x0))==0)]
x0[-which(rowSums(!is.na(x0))==0)]
rowSums(!is.na(x0))
x0[-c(56:58)]
x0 <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F)
x0[,-which(colSums(!is.na(x0))==0)]
x0[-c(56:58),]
x0 <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F)
x0 <- x0[,-which(colSums(!is.na(x0))==0)]
View(x)
View(x0)
x0[56,]
x0[56,2]==NULL
is.null(x0[56,2])
is.na(x0[56,2])
x0 <- read.csv("StatesData.csv",header = F ,stringsAsFactors = F)
x0 <- x0[,-which(colSums(!is.na(x0))==0)]
x0 <- x0[-c(56:58),]
x1 <- x0[c(5:dim(x0)[1]), c(2:10)]
View(x0)
View(x0)
x1 <- x0[c(5:dim(x0)[1]), c(2:dim(x0)[2])]
View(x1)
colnames(x1) <- x0[4, dim(x0)[1])]
colnames(x1) <- x0[4, dim(x0)[1]]
View(x1)
x0[4, dim(x0)[1]]
View(x)
colnames(x1) <- x0[4, c(2:dim(x0)[1])]
c(2:dim(x0)[1])
colnames(x1) <- x0[4, c(2:dim(x0)[2])]
rownames(x1) <- x0[c(5:dim(x0)[2]), 1]
x0[c(5:dim(x0)[2]), 1]
rownames(x1) <- x0[c(5:dim(x0)[1]), 1]
View(x1)
View(x0)
x.comments <- x0 <- [,c(1:3)]
x.comments <- x0[,c(1:3)]
View(x.comments)
library('nloptr')
tpar <- list()
tpar$rowx <- 500
tpar$colx <- 500
tpar$p <- 0.4
tpar$a0 <- rep(seq(1, 3, by =0.5), each=100)
tpar$b0 <- rep(1:2, each=250)
tpar$a1 <- rep(2:5, 125)
tpar$b1 <- rep(seq(3, 5, by =0.5), each=100)
tpar$lam <- rep(1:2, 250)
tpar$eta <- rep(seq(1, 3, by =0.5), 100)
true_v <- cbind(tpar$a0,tpar$a1,tpar$b0,tpar$b1)
true_u <- cbind(tpar$lam, tpar$eta)
tpar$a0
library('nloptr')
tpar <- list()
tpar$rowx <- 500
tpar$colx <- 500
tpar$p <- 0.4
tpar$a0 <- rep(seq(1, 3, by =0.5), each=100)
tpar$b0 <- rep(1:2, each=250)
tpar$a1 <- rep(2:5, 125)
tpar$b1 <- rep(seq(3, 5, by =0.5), each=100)
tpar$lam <- rep(1:2, 250)
tpar$eta <- rep(seq(1, 3, by =0.5), 100)
true_v <- cbind(tpar$a0,tpar$a1,tpar$b0,tpar$b1)
true_u <- cbind(tpar$lam, tpar$eta)
x <- matrix(rbinom(tpar$rowx*tpar$colx, 1, tpar$p), tpar$rowx, tpar$colx)
View(x)
mu <- matrix(NA, tpar$rowx, tpar$col)
z <- matrix(NA, tpar$rowx, tpar$col)
y <- matrix(NA, tpar$rowx, tpar$col)
library('nloptr')
tpar <- list()
tpar$rowx <- 500
tpar$colx <- 500
tpar$p <- 0.4
tpar$a0 <- rep(seq(1, 3, by =0.5), each=100)
tpar$b0 <- rep(1:2, each=250)
tpar$a1 <- rep(2:5, 125)
tpar$b1 <- rep(seq(3, 5, by =0.5), each=100)
tpar$lam <- rep(1:2, 250)
tpar$eta <- rep(seq(1, 3, by =0.5), 100)
true_v <- cbind(tpar$a0,tpar$a1,tpar$b0,tpar$b1)
true_u <- cbind(tpar$lam, tpar$eta)
x <- matrix(rbinom(tpar$rowx*tpar$colx, 1, tpar$p), tpar$rowx, tpar$colx)
mu <- matrix(NA, tpar$rowx, tpar$col)
z <- matrix(NA, tpar$rowx, tpar$col)
y <- matrix(NA, tpar$rowx, tpar$col)
for (c in 1:tpar$rowx) {
for (g in 1:tpar$colx) {
mu[c,g] <- rgamma(1, shape = tpar$a0[g] + tpar$a1[g]*x[c,g], rate = tpar$b0[g] + tpar$b1[g]*x[c,g])
}
}
for (c in 1:tpar$rowx) {
for (g in 1:tpar$colx) {
z[c,g] <- rbinom(1, 1, exp(-tpar$lam[c]*mu[c,g]))
}
}
for (c in 1:tpar$rowx) {
for (g in 1:tpar$colx) {
if (z[c,g] == 0) {y[c,g] <- rpois(1, tpar$eta[c]*mu[c,g])}
else {y[c,g] <- 0}
}
}
View(y)
hist(y)
View(x)
library('nloptr')
tpar <- list()
tpar$rowx <- 500
tpar$colx <- 500
tpar$p <- 0.4
tpar$a0 <- rep(seq(1, 3, by =0.5), each=100)
tpar$b0 <- rep(1:2, each=250)
tpar$a1 <- rep(2:5, 125)
tpar$b1 <- rep(seq(3, 5, by =0.5), each=100)
tpar$lam <- rep(1:2, 250)
tpar$eta <- rep(seq(1, 3, by =0.5), 100)
true_v <- cbind(tpar$a0,tpar$a1,tpar$b0,tpar$b1)
true_u <- cbind(tpar$lam, tpar$eta)
x <- matrix(rbinom(tpar$rowx*tpar$colx, 1, tpar$p), tpar$rowx, tpar$colx)
mu <- matrix(NA, tpar$rowx, tpar$col)
z <- matrix(NA, tpar$rowx, tpar$col)
y <- matrix(NA, tpar$rowx, tpar$col)
for (c in 1:tpar$rowx) {
for (g in 1:tpar$colx) {
mu[c,g] <- rgamma(1, shape = tpar$a0[g] + tpar$a1[g]*x[c,g], rate = tpar$b0[g] + tpar$b1[g]*x[c,g])
}
}
View(mu)
nc
for (c in 1:tpar$rowx) {
for (g in 1:tpar$colx) {
z[c,g] <- rbinom(1, 1, exp(-tpar$lam[c]*mu[c,g]))
}
}
View(z)
library('nloptr')
tpar <- list()
tpar$rowx <- 500
tpar$colx <- 500
tpar$p <- 0.4
tpar$a0 <- rep(seq(1, 3, by =0.5), each=100)
tpar$b0 <- rep(1:2, each=250)
tpar$a1 <- rep(2:5, 125)
tpar$b1 <- rep(seq(3, 5, by =0.5), each=100)
tpar$lam <- rep(1:2, 250)
tpar$eta <- rep(seq(1, 3, by =0.5), 100)
true_v <- cbind(tpar$a0,tpar$a1,tpar$b0,tpar$b1)
true_u <- cbind(tpar$lam, tpar$eta)
x <- matrix(rbinom(tpar$rowx*tpar$colx, 1, tpar$p), tpar$rowx, tpar$colx)
mu <- matrix(NA, tpar$rowx, tpar$col)
z <- matrix(NA, tpar$rowx, tpar$col)
y <- matrix(NA, tpar$rowx, tpar$col)
####
M=10
for (c in 1:tpar$rowx) {
for (g in 1:tpar$colx) {
mu[c,g] <- rgamma(1, shape = tpar$a0[g] + tpar$a1[g]*x[c,g], rate = tpar$b0[g] + tpar$b1[g]*x[c,g])
}
}
for (c in 1:tpar$rowx) {
for (g in 1:tpar$colx) {
z[c,g] <- rbinom(1, 1, exp(-tpar$lam[c]*mu[c,g]))
}
}
for (c in 1:tpar$rowx) {
for (g in 1:tpar$colx) {
if (z[c,g] == 0) {y[c,g] <- rpois(1, tpar$eta[c]*mu[c,g])}
else {y[c,g] <- 0}
}
}
#############################################################################
loglike_uc <- function(uc){
L <- 0
for (g in 1:G){
if (y[c,g] == 0) {L = L + (v[g,1]+v[g,2]*x[c,g])*log(v[g,3]+v[g,4]*x[c,g]) + log( 1/(v[g,3]+v[g,4]*x[c,g]+uc[2])^(v[g,1]+v[g,2]*x[c,g]) - 1/(v[g,3]+v[g,4]*x[c,g]+uc[1]+uc[2])^(v[g,1]+v[g,2]*x[c,g]) + 1/(v[g,3]+v[g,4]*x[c,g]+uc[1])^(v[g,1]+v[g,2]*x[c,g]) )  }
else {L = L + y[c,g]*log(uc[2]) + lgamma(v[g,1]+v[g,2]*x[c,g]+y[c,g]) - lgamma(v[g,1]+v[g,2]*x[c,g])  + (v[g,1]+v[g,2]*x[c,g])*log(v[g,3]+v[g,4]*x[c,g]) + log( 1/(v[g,3]+v[g,4]*x[c,g]+uc[2])^(v[g,1]+v[g,2]*x[c,g]+y[c,g]) - 1/(v[g,3]+v[g,4]*x[c,g]+uc[1]+uc[2])^(v[g,1]+v[g,2]*x[c,g]+y[c,g]) )  }
}
return(-L)
}
loglike_vg <- function(vg){
L <- 0
for (c in 1:C){
if (y[c,g] == 0) {L = L + (vg[1]+vg[2]*x[c,g])*log(vg[3]+vg[4]*x[c,g]) + log( 1/(vg[3]+vg[4]*x[c,g]+update_u[c,2])^(vg[1]+vg[2]*x[c,g]) - 1/(vg[3]+vg[4]*x[c,g]+update_u[c,1]+update_u[c,2])^(vg[1]+vg[2]*x[c,g]) + 1/(vg[3]+vg[4]*x[c,g]+update_u[c,1])^(vg[1]+vg[2]*x[c,g]) )  }
else {L = L + lgamma(vg[1]+vg[2]*x[c,g]+y[c,g]) - lgamma(vg[1]+vg[2]*x[c,g])  + (vg[1]+vg[2]*x[c,g])*log(vg[3]+vg[4]*x[c,g]) + log( 1/(vg[3]+vg[4]*x[c,g]+update_u[c,2])^(vg[1]+vg[2]*x[c,g]+y[c,g]) - 1/(vg[3]+vg[4]*x[c,g]+update_u[c,1]+update_u[c,2])^(vg[1]+vg[2]*x[c,g]+y[c,g]) )  }
}
return(-L)
}
update_v <- function(v,x,y,u){
update_par <- list()
C<-nrow(x)
G<-ncol(x)
update_u <- matrix(rep(NA, 2*C), C)
for (c in 1:C) {
nloptr_u <- nloptr(x0=u[c,], eval_f=loglike_uc, lb=c(0,0), opts = list("algorithm"="NLOPT_LN_COBYLA"))
update_u[c,] <- nloptr_u$solution
}
update_v <- matrix(rep(NA, 4*G), G)
g_likeli <- matrix(NA, G)
for (g in 1:G) {
nloptr_v <- nloptr(x0=v[g,], eval_f=loglike_vg, lb=c(0,0,0,0), opts = list("algorithm"="NLOPT_LN_COBYLA"))
update_v[g,] <- nloptr_v$solution
g_likeli[g] <- nloptr_v$objective
}
update_par$new_u <- update_u
update_par$new_v <- update_v
update_par$iter_likeli <- sum(g_likeli)/G
return(update_par)
}
ini_v_t <- true_v
ini_u_t <- true_u
iter_likelihood_t <- matrix(NA, M, 1)
for (m in 1:M) {
update_par <- update_v(ini_v_t,x,y,ini_u_t)
ini_v_t <- update_par$new_v
ini_u_t <- update_par$new_u
iter_likelihood_t[m] <- update_par$iter_likeli
}
write.table(iter_likelihood_t, file = "true value")
plot(tpar$a0, ini_v_t[,1], main="alpha 0", xlab="true value", ylab="estimation")
plot(tpar$a1, ini_v_t[,2], main="alpha 1", xlab="true value", ylab="estimation")
plot(tpar$b0, ini_v_t[,3], main="beta 0", xlab="true value", ylab="estimation")
plot(tpar$b1, ini_v_t[,4], main="beta 1", xlab="true value", ylab="estimation")
update_par <- update_v(ini_v_t,x,y,ini_u_t)
x
C<-nrow(x)
G<-ncol(x)
G
C
reshape::melt
install.packages(Rfast)
install.packages('Rfast')
load("D:/R_work/scRNAproj/simulation1/res/simu_s2.Rdata")
epar
epar[,1]/epar[,2]
epar$parc[,1]/epar$parc[,2]
log10(0.05)
library(CFGL)
expr
library(idr3c)
lgamma
factorial(y)
factorial
gamma
nlminb
logit(0.4)
logit <- funtion(p) return(log(p/1-p))
logit <- funtion(p) {return(log(p/1-p))}
logit <- funtion(p) {
return(log(p/1-p))
}
logit <- funtion(p) {
x <- log(p/1-p)
return(x)
}
logit <- function(p) {
x <- log(p/1-p)
return(x)
}
logit(0.00001)
logit(0.001)
logit(0.01)
logit(0.1)
logit <- function(p) {
x <- log(p/(1-p))
return(x)
}
logit(0.1)
logit(0.000001)
logit(0.0000000000000000001)
logit(1)
logit(0)
logit(0.99999999999999999999999)
logit(0.999999999999999999999)
logit(0.99999999999999)
logit(0.999999999999999)
log(100)
log(10)
12/2834
22/2834
30/2834
351+325+126+88+557+246+79+618+152+126
2668/10
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("igraph")
install.packages("igraph")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("igraph")
install.packages("igraph")
library("igraph")
library("igraph")
library("igraph")
install.packages("WGCNA")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("igraph")
install.packages("igraph")
remove.packages("CFGL")
vignette('CFGK')
vignette('CFGL')
remove.packages("CFGL")
library("igraph", lib.loc="D:/R/R-3.4.1/library")
remove.packages("igraph")
setwd("d:/R_work/CFGL/");
rm(list=ls(all=TRUE));
library("devtools")
library("roxygen2")
library("igraph")
install_github("Yafei611/CFGL",build_vignettes = T)
library(CFGL)
setwd("d:/R_work/CFGL/");
rm(list=ls(all=TRUE));
library("devtools")
library("roxygen2")
library("igraph")
install_github("Yafei611/CFGL",build_vignettes = T)
library(CFGL)
################################################
theta2rmat <- function(theta,top_edge=NULL,min_edge=0,keep.diag=F,verbose=F){
temp0 <- NULL
temp1 <- NULL
temp2 <- NULL
rmat <- list()
rmat2 <- list()
for (i in 1:length(theta)) {
temp <- diag(theta[[i]])
rmat[[i]] <- -theta[[i]]/sqrt(temp%*%t(temp))
}
if (!is.null(top_edge)){
for (i in 1:length(rmat)) {
temp0 <- rmat[[i]]
diag(temp0) <- 0
temp1 <- c(temp1,abs(as.vector(temp0)))
}
temp1 <- temp1[which(temp1!=0)]
min_edge0 <- temp1[which(rank(-temp1,ties.method = "random")==top_edge)]
if (min_edge0>min_edge) print("Min_edge was overrided")
min_edge <- max(min_edge0,min_edge)
}
if (verbose) print(paste("min_edge is",min_edge))
for (i in 1:length(rmat)) {
temp2 <- rmat[[i]]
diag(temp2) <- 0
temp2[abs(temp2)<min_edge] <- 0
rmat2[[i]] <- temp2
if (keep.diag) diag(rmat2[[i]]) <- diag(rmat[[i]])
}
return(rmat2)
}
get_sp_net_3t <- function(rmat){
nm <- matrix(0,dim(rmat[[1]])[1],dim(rmat[[1]])[1])
nt <- list()
nt$t1 <- rmat[[1]]
nt$t2 <- rmat[[2]]
nt$t3 <- rmat[[3]]
nt$t1s <- nm;lb <- which((nt$t1!=0)&(nt$t2==0)&(nt$t3==0))
nt$t1s[lb] <- rmat[[1]][lb]
nt$t2s <- nm;lb <- which((nt$t1==0)&(nt$t2!=0)&(nt$t3==0))
nt$t2s[lb] <- rmat[[2]][lb]
nt$t3s <- nm;lb <- which((nt$t1==0)&(nt$t2==0)&(nt$t3!=0))
nt$t3s[lb] <- rmat[[3]][lb]
nt$t12s <- nm; lb <- which((nt$t1!=0)&(nt$t2!=0)&(nt$t3==0))
nt$t12s[lb] <- (abs(rmat[[1]][lb])+abs(rmat[[2]][lb]))/2
nt$t13s <- nm; lb <- which((nt$t1!=0)&(nt$t2==0)&(nt$t3!=0))
nt$t13s[lb] <- (abs(rmat[[1]][lb])+abs(rmat[[3]][lb]))/2
nt$t23s <- nm; lb <- which((nt$t1==0)&(nt$t2!=0)&(nt$t3!=0))
nt$t23s[lb] <- (abs(rmat[[2]][lb])+abs(rmat[[3]][lb]))/2
nt$t123s <- nm; lb <- which((nt$t1!=0)&(nt$t2!=0)&(nt$t3!=0))
nt$t123s[lb] <- (abs(rmat[[1]][lb])+abs(rmat[[2]][lb])+abs(rmat[[3]][lb]))/3
return(nt)
}
get_sp_net_2t <- function(rmat){
nm <- matrix(0,dim(rmat[[1]])[1],dim(rmat[[1]])[1])
nt <- list()
nt$t1 <- rmat[[1]]
nt$t2 <- rmat[[2]]
nt$t1s <- nm;lb <- which((nt$t1!=0)&(nt$t2==0))
nt$t1s[lb] <- rmat[[1]][lb]
nt$t2s <- nm;lb <- which((nt$t1==0)&(nt$t2!=0))
nt$t2s[lb] <- rmat[[2]][lb]
nt$t12 <- nm; lb <- which((nt$t1!=0)&(nt$t2!=0))
nt$t12[lb] <- (abs(rmat[[1]][lb])+abs(rmat[[2]][lb]))/2
return(nt)
}
show_net <- function(mat,gname=c(1:dim(mat)[1])){
nt <- mat
colnames(nt) <- gname
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.graphopt)
}
get_top_node <- function(mat,topn,gname){
temp <- rowSums(abs(mat)>0)
names(temp) <- gname
return(sort(temp,decreasing = T)[1:topn])
}
################################################
### get the theta
x <- expr                       # get the preloaded data
gname <- colnames(expr[[1]])    # get name of genes
str(x)                          # check the data
dim(x$brain)
dim(x$heart)
temp <- get_scr_mat(expr1 = x[[1]],expr2 = x[[2]])
scr.mat <- temp$scr.mat
sum(scr.mat)/(prod(dim(scr.mat)))
s.sl <- temp$s
lam1=0.0006
lam2=0.0004
temp = CFGL(expr, lambda1 = lam1, lambda2 = lam2, btc.screening = scr.mat)
