v=unique(nsamp); npg=table(nsamp);
X2=vector("list",M)
#upper level for M labs, i.e. g=0
X1=rmvnorm(npg[1],rep(0,sum(Rep)),sigma=diag(sum(Rep)));
#lower level
sizes=array(1,c(M,K))
mk=mg0
print(mk)
X2=vector("list",M)
id0=vector("list",M)
for (m in 1:M){
pg1=pkgm[m,];
nsamp1 =sample(1:K, npg[2], replace = TRUE, prob = pg1)
v1=unique(nsamp1); npg1=table(nsamp1);
#Sig=matrix(c(s2m[m],s2m[m]*rhom[m],s2m[m]*rhom[m],s2m[m]),Rep[m],2)
Sig=matrix(rep(s2m[m]*rhom[m],Rep[m]^2),Rep[m],Rep[m])
diag(Sig)=rep(s2m[m],Rep[m])
x1=rmvnorm(npg1[1],rep(mk[m],Rep[m]),sigma=diag(Rep[m]))
x2=rmvnorm(npg1[2],rep(mum[m],Rep[m]),sigma=Sig)
#x2=x0[sample(nrow(x0)),]
id1=c(rep(1,npg1[1]),rep(2,npg1[2]))
x0=rbind(x1,x2)
X2[[m]]=x0[sample(nrow(x0)),]
j=match(X2[[m]][,1],x0[,1])
#rbind(rmvnorm(npg1[1],rep(mk[m],2),sigma=diag(Rep[m])),rmvnorm(npg1[2],rep(mum[m],Rep[m]),sigma=Sig))
sizes[m,]=npg1;
id0[[m]]=id1[j]
}
X3=abind(X2, along=2)
X=rbind(X1,X3)
out= list()
out$X=X
out$npg=npg
out$sizes=sizes
out$idx=id0
return(out)
}
# data generation
out=randNestedMixt(N,mg,mum,s2m,rhom,pg,pkgm,M,Rep)
X=out$X
npg=out$npg
sizes=out$sizes
Tid1=out$idx[[1]]
Tid2=out$idx[[2]]
Tid=c(rep(1,npg[1]),rep(2,npg[2]))
First=c(rep(1,npg[1]),Tid1+1)
Second=c(rep(1,npg[1]),Tid2+1)
#lower level
K=2
# upper level
G=2
mum0=mum;
s2m0=s2m;
rhom0=rhom;
pg0=pg;
pkgm0=pkgm;
mg0=mg
mum0=mum;
s2m0=s2m;
rhom0=rhom;
pg0=pg;
pkgm0=pkgm;
mg0=mg
# out2=DirMax(X,N,mg0,mum0,s2m0,rhom0,pg0,pkgm0,M,Rep,verbose=FALSE,trace.theta=TRUE)
###
#DirMax<-function(X,N,mg,mum,s2m,rhom,pg,pkgm,M,Rep,verbose = FALSE,trace.theta = FALSE){
X <- X
N <- N
mg <- mg0
mum <- mum0
s2m <- s2m0
rhom <- rhom0
pg <- pg
pkgm <- pkgm0
M <- M
Rep <- Rep
eps=c(param=1.e-4,loglik=1.e-6)
maxiter = c(50, 1000)
if (length(eps) == 1) eps <- c(param = eps, loglik = eps)
eps <- as.list(eps)
maxiter <- unlist(maxiter)
len <- nrow(X)
nrep <- ncol(X)
npar=5*M+1
# eps=as.double(unlist(eps))
itmax=as.integer(maxiter)
# len= as.integer(len)
# nrep=as.integer(nrep)
#
theta=list()
theta.tr=vector("list")
# liv=as.integer(59+npar)
# iv=integer(59+npar)
# lv=as.integer(lv)
# v=double(lv)
# lloc=10
# cRep=cumsum(Rep)
# cRep= c(0,cRep)
# G=2;K=2;
tol=1e-08
oldll=-Inf
# iv[1]=0
# j=0
Z=array(1,c(N,sum(Rep)))
u <- Uhat(X)
idx=rep(1:M,Rep)
View(X)
View(u)
Uhat
View(u)
u <- Uhat(X)
idx=rep(1:M,Rep)
out1=vector("list",length(idx))
theta1=vector("list",length(idx))
for(i in 1:length(idx)){
out1[[i]]$lambda=c(pg[1],pg[2]*pkgm[idx[i],])
out1[[i]]$mu=c(0,mg[idx[i]],mum[idx[i]])
out1[[i]]$sigma=c(1,1,sqrt(s2m[idx[i]]))
}
id=cumsum(Rep)
idx=rep(1:M,Rep)
theta1=vector("list",M)
mix=vector("list",M)
out1
qgmm.marginal
u[,(id[m]-Rep[m]+1):id[m]]
id=cumsum(Rep)
idx=rep(1:M,Rep)
theta1=vector("list",M)
mix=vector("list",M)
for (m in 1:M){
theta1[[m]]$pie=c(pg[1],pg[2]*pkgm[idx[i],])
theta1[[m]]$mu[[1]]=rep(0,Rep[m])
theta1[[m]]$mu[[2]]=rep(mg[m],Rep[m])
theta1[[m]]$mu[[3]]=rep(mum[1],Rep[m])
theta1[[m]]$sigma[[1]]=rep(1,Rep[m])
theta1[[m]]$sigma[[2]]=rep(1,Rep[m])
theta1[[m]]$sigma[[3]]=rep((s2m[m]),Rep[m])
mix[[m]]=out1[[idx[idx==m][1]]]
###
Z[,(id[m]-Rep[m]+1):id[m]] <- qgmm.marginal(u[,(id[m]-Rep[m]+1):id[m]], theta1[[m]],mix[[m]], res = 1000, spread = 5)
}
qgmm.marginal <- function (u, theta, mix,res = 1000, spread = 5) {
d <- dim(u)[2]
m <- length(c(theta$pie))
n.samples <- round(res * theta$pie)
n.samples[n.samples == 0] <- 2
# Create grid of evalutation
s <- NULL
for (i in 1:d) {
for (j in 1:m) {
m.ij <- theta$mu[[j]][i]
sd.ij <- sqrt(theta$sigma[[j]][i])
s <- c(s, seq(m.ij-spread*sd.ij, m.ij+spread*sd.ij, l = n.samples[j]))
}
}
dim(s) <- c(sum(n.samples), d)
# Evaluate on cdf on the grid
eval=array(NA,dim(s))
for (j in 1:d){
eval[,j] <- pnormmix(s[,j],mix)
}
#pgmm_marginal(z = s, mus = theta$mu, sigmas = theta$sigma, pie = theta$pie)
# Invert function
z.out <- NULL
for (j in 1:d) {
z.out <- c(z.out, approxfun(eval[, j], s[, j], rule = 2)(u[, j]))
}
z.out.is.na <- is.na(z.out)
if (any(z.out.is.na)) {
z.out[z.out.is.na & u >= 1] <- Inf
z.out[z.out.is.na & u <= 0] <- -Inf
}
dim(z.out) <- c(nrow(u),d)
return(z.out)
}
id=cumsum(Rep)
idx=rep(1:M,Rep)
theta1=vector("list",M)
mix=vector("list",M)
for (m in 1:M){
theta1[[m]]$pie=c(pg[1],pg[2]*pkgm[idx[i],])
theta1[[m]]$mu[[1]]=rep(0,Rep[m])
theta1[[m]]$mu[[2]]=rep(mg[m],Rep[m])
theta1[[m]]$mu[[3]]=rep(mum[1],Rep[m])
theta1[[m]]$sigma[[1]]=rep(1,Rep[m])
theta1[[m]]$sigma[[2]]=rep(1,Rep[m])
theta1[[m]]$sigma[[3]]=rep((s2m[m]),Rep[m])
mix[[m]]=out1[[idx[idx==m][1]]]
###
Z[,(id[m]-Rep[m]+1):id[m]] <- qgmm.marginal(u[,(id[m]-Rep[m]+1):id[m]], theta1[[m]],mix[[m]], res = 1000, spread = 5)
}
pnormmix <- function(x,mixture) {
lambda <- mixture$lambda
k <- length(lambda)
pnorm.from.mix <- function(x,component) {
lambda[component]*pnorm(x,mean=mixture$mu[component],
sd=mixture$sigma[component])
}
pnorms <- sapply(1:k,pnorm.from.mix,x=x)
if (length(x)==1){
return(sum(pnorms))
}else{
return(rowSums(pnorms))}
}
dnormmix <- function(x,mixture) {
lambda <- mixture$lambda
Wg1=array(NA,c(length(x),length(lambda)))
k <- length(lambda)
dnorm.from.mix <- function(x,component) {
log(lambda[component])+log(dnorm(x,mean=mixture$mu[component],
sd=mixture$sigma[component]))
}
dnorms1 <- sapply(1:k,dnorm.from.mix,x=x)
dnorm2=((apply((dnorms1),1,sumlog)))
return(dnorm2)
}
id=cumsum(Rep)
idx=rep(1:M,Rep)
theta1=vector("list",M)
mix=vector("list",M)
for (m in 1:M){
theta1[[m]]$pie=c(pg[1],pg[2]*pkgm[idx[i],])
theta1[[m]]$mu[[1]]=rep(0,Rep[m])
theta1[[m]]$mu[[2]]=rep(mg[m],Rep[m])
theta1[[m]]$mu[[3]]=rep(mum[1],Rep[m])
theta1[[m]]$sigma[[1]]=rep(1,Rep[m])
theta1[[m]]$sigma[[2]]=rep(1,Rep[m])
theta1[[m]]$sigma[[3]]=rep((s2m[m]),Rep[m])
mix[[m]]=out1[[idx[idx==m][1]]]
###
Z[,(id[m]-Rep[m]+1):id[m]] <- qgmm.marginal(u[,(id[m]-Rep[m]+1):id[m]], theta1[[m]],mix[[m]], res = 1000, spread = 5)
}
View(Z)
fn=function(par, Z,N,K,G,M,Rep){
pg=c(par[1],1-par[1])
pkgm=cbind(par[2:(1+M)],1-par[2:(1+M)])
mg=par[(M+2):(2*M+1)]
mum=par[(2*M+2):(3*M+1)]
s2m=par[(3*M+2):(4*M+1)]
rhom=par[(4*M+2):(5*M+1)]
cRep=cumsum(Rep)
cRep= c(0,cRep)
print(pg)
print(pkgm)
id=which(is.nan(pg)==TRUE)
id1=which(is.nan(pkgm)==TRUE)
#
# print(pg)
#print(pkgm)
#   if (is.finite(pg)) {
#     return(-loglik)
#   }
#   else {
#     return(1e+09)
#   }
Z=array(1,c(N,sum(Rep)))
u <- Uhat(X)
idx=rep(1:M,Rep)
out1=vector("list",length(idx))
theta1=vector("list",length(idx))
for(i in 1:length(idx)){
out1[[i]]$lambda=c(pg[1],pg[2]*pkgm[idx[i],])
out1[[i]]$mu=c(0,mg[idx[i]],mum[idx[i]])
out1[[i]]$sigma=c(1,1,sqrt(s2m[idx[i]]))
}
id=cumsum(Rep)
idx=rep(1:M,Rep)
theta1=vector("list",M)
mix=vector("list",M)
for (m in 1:M){
theta1[[m]]$pie=c(pg[1],pg[2]*pkgm[idx[i],])
theta1[[m]]$mu[[1]]=rep(0,Rep[m])
theta1[[m]]$mu[[2]]=rep(mg[m],Rep[m])
theta1[[m]]$mu[[3]]=rep(mum[1],Rep[m])
theta1[[m]]$sigma[[1]]=rep(1,Rep[m])
theta1[[m]]$sigma[[2]]=rep(1,Rep[m])
theta1[[m]]$sigma[[3]]=rep((s2m[m]),Rep[m])
mix[[m]]=out1[[idx[idx==m][1]]]
Z[,(id[m]-Rep[m]+1):id[m]] <- qgmm.marginal(u[,(id[m]-Rep[m]+1):id[m]], theta1[[m]],mix[[m]], res = 5000, spread = 3)
}
tmp=array(NA,dim(Z))
for (j in 1:dim(Z)[2]){
tmp[,j]    <- dnormmix(Z[,j],out1[[j]])}
WKg1=array(1,c(N,K,M))
norm1=array(1,c(N,M))
Wg1=array(1,c(N,G))
for (m in 1:M){
WKg1[,1,m]=log(dmvnorm(Z[,(cRep[m]+1):cRep[m+1]],rep(mg[m] ,Rep[m]),diag(Rep[m])))
Sig=matrix(rep(s2m[m]*rhom[m],Rep[m]^2),Rep[m],Rep[m])
diag(Sig)=rep(s2m[m],Rep[m])
#Sig=matrix(c(s2m[m],s2m[m]*rhom[m],s2m[m]*rhom[m],s2m[m]),2,2)
#Sig=e$vectors%*%diag(e$values)%*%t(e$vectors)
WKg1[,2,m]=log(dmvnorm(Z[,(cRep[m]+1):cRep[m+1]],rep(mum[m] ,Rep[m]),Sig))
#WKg[WKg<1e-05]=1e-05
e=as.matrix(WKg1[,,m])
ind=(e<(-7.0e2));
U=exp((-7.0e2)*ind+WKg1[,,m]*(1-ind))%*%diag(pkgm[m,]);
norm1[,m]=apply(U,1,sum)
}
#
#g=0 & g=1
w=dmvnorm(Z);
#w[w<.Machine$double.eps]=.Machine$double.eps
Wg1[,1]=log(w);
#norm1[norm1<.Machine$double.eps]=.Machine$double.eps
Wg1[,2]=   log(apply((norm1),1,prod))
ind=(Wg1<(-7.0e2));
U=exp((-7.0e2)*ind+Wg1*(1-ind))%*%diag(pg);
#Wg1[Wg1<-150]=-150
#   ind=matrix(0,N,G)
#   for (g in 1:G){
#     ind[Wg1[,g]<-7.0e2,g]=1;
#   }
#
#
#   Wg1=(-7.0e2*ind+Wg1*(1-ind));
#
#print(Wg1)
lik=((apply(U,1,sum)))
#lik[lik<.Machine$double.eps]=.Machine$double.eps
#tmp[tmp<.Machine$double.eps]=.Machine$double.eps;
loglik <-sum(log(lik))- sum(rowSums((tmp)))
f=-loglik
if (is.finite(loglik)) {
return(-loglik)
}
else {
return(1e+09)
}
}
j=1
j=j+1
para0=c((pg[1]), (t(pkgm[,1])),mg,mum,s2m,rhom)
l=c(0.05,rep(0.05,M),rep(.Machine$double.eps,2*M),rep(0.05,M),rep(0.01,M))
up=c(.85,rep(.85,M),rep(10,2*M),rep(20,M),rep(.99,M))
###
output= nlminb(para0, fn, Z=Z,N=N,K=K,G=G,M=M,Rep=Rep,
scale = 1, lower =l, upper = up,
control = list(eval.max=1,iter.max=3))
para0
install.packages("D:/R_work/IDR_mutilab/package/newIDRcode.tar.gz", repos = NULL, type = "source")
ss
data.frame(ID=c(1:5),drug_A,drug_A_mg,drug_B,drug_B_mg,drug_C,drug_C_mg)
drug_A <- c(1,0,0,0,0)
drug_A_mg <- c(20,0,0,0,0)
drug_B <- c(0,1,1,0,0)
drug_B_mg <- c(0,10,10,0,0)
drug_C <- c(0,0,0,1,1)
drug_C_mg <- c(0,0,0,5,5)
dat <- data.frame(ID=c(1:5),drug_A,drug_A_mg,drug_B,drug_B_mg,drug_C,drug_C_mg)
View(dat)
drug_A <- c(1,0,0,0,0)
drug_A_mg <- c(20,0,0,0,0)
drug_B <- c(0,1,1,0,0)
drug_B_mg <- c(0,10,10,0,0)
drug_C <- c(0,0,0,1,1)
drug_C_mg <- c(0,0,0,5,5)
dat <- data.frame(ID=c(1:5),drug_A,drug_A_mg,drug_B,drug_B_mg,drug_C,drug_C_mg)
drug_name <- c("A","B","C")
drug_name[1]
index <- matrix(0,nc=2,nr=length(drug_name))
paste("drug_",drug_name[1],sep="")
colname(dat)==paste("drug_",drug_name[1],sep="")
colnames(dat)==paste("drug_",drug_name[1],sep="")
which(colnames(dat)==paste("drug_",drug_name[1],sep=""))
drug_A <- c(1,0,0,0,0)
drug_A_mg <- c(20,0,0,0,0)
drug_B <- c(0,1,1,0,0)
drug_B_mg <- c(0,10,10,0,0)
drug_C <- c(0,0,0,1,1)
drug_C_mg <- c(0,0,0,5,5)
dat <- data.frame(ID=c(1:5),drug_A,drug_A_mg,drug_B,drug_B_mg,drug_C,drug_C_mg)
drug_name <- c("A","B","C")
index <- matrix(0,nc=2,nr=length(drug_name))
for (i in 1:length(drug_name)){
index[i,1] <- which(colnames(dat)==paste("drug_",drug_name[1],sep=""))
index[i,2] <- which(colnames(dat)==paste("drug_",drug_name[1],"_mg",sep=""))
}
index
index[i,1] <- which(colnames(dat)==paste("drug_",drug_name[i],sep=""))
index[i,2] <- which(colnames(dat)==paste("drug_",drug_name[i],"_mg",sep=""))
for (i in 1:length(drug_name)){
index[i,1] <- which(colnames(dat)==paste("drug_",drug_name[i],sep=""))
index[i,2] <- which(colnames(dat)==paste("drug_",drug_name[i],"_mg",sep=""))
}
for (i in 1:length(drug_name)){
index[i,1] <- which(colnames(dat)==paste("drug_",drug_name[i],sep=""))
index[i,2] <- which(colnames(dat)==paste("drug_",drug_name[i],"_mg",sep=""))
}
index
index <- data.frame(name=drug_name,index)
index
i=i
j=1
dat[1,]
index[j,]
index[j,2]
dat[i,index[j,2]]
index[j,1]
drug_A <- c(1,0,0,0,0)
drug_A_mg <- c(20,0,0,0,0)
drug_B <- c(0,1,1,0,0)
drug_B_mg <- c(0,10,10,0,0)
drug_C <- c(0,0,0,1,1)
drug_C_mg <- c(0,0,0,5,5)
dat <- data.frame(ID=c(1:5),drug_A,drug_A_mg,drug_B,drug_B_mg,drug_C,drug_C_mg)
drug_name <- c("A","B","C")
index <- matrix(0,nc=2,nr=length(drug_name))
for (i in 1:length(drug_name)){
index[i,1] <- which(colnames(dat)==paste("drug_",drug_name[i],sep=""))
index[i,2] <- which(colnames(dat)==paste("drug_",drug_name[i],"_mg",sep=""))
}
index <- data.frame(name=drug_name,index)
dat.dr<- NULL
dat.mg<- NULL
for(i in 1:dim(dat)[1]){
for (j in 1:dim(index)[1]){
if (dat[i,index[j,2]]==1){
dat.dr[i] <- index[j,1]
dat.mg[i] <- dat[i,index[j,3]]
}
}
}
dar.dr
dat.dr
dat.mg
dat2 <- data.frame(dat$ID,drug_name=dat,dr,drug_mg=dat.mg)
dat2 <- data.frame(dat$ID,drug_name=dat.dr,drug_mg=dat.mg)
dat2
drug_A <- c(1,0,0,0,0)
drug_A_mg <- c(20,0,0,0,0)
drug_B <- c(0,1,1,0,0)
drug_B_mg <- c(0,10,10,0,0)
drug_C <- c(0,0,0,1,1)
drug_C_mg <- c(0,0,0,5,5)
dat <- data.frame(ID=c(1:5),drug_A,drug_A_mg,drug_B,drug_B_mg,drug_C,drug_C_mg)
drug_name <- c("A","B","C")
index <- matrix(0,nc=2,nr=length(drug_name))
for (i in 1:length(drug_name)){
index[i,1] <- which(colnames(dat)==paste("drug_",drug_name[i],sep=""))
index[i,2] <- which(colnames(dat)==paste("drug_",drug_name[i],"_mg",sep=""))
}
index <- data.frame(name=drug_name,index)
dat.dr<- NULL
dat.mg<- NULL
for(i in 1:dim(dat)[1]){
for (j in 1:dim(index)[1]){
if (dat[i,index[j,2]]==1){
dat.dr[i] <- as.character(index[j,1])
dat.mg[i] <- dat[i,index[j,3]]
}
}
}
dat2 <- data.frame(dat$ID,drug_name=dat.dr,drug_mg=dat.mg)
dat2
drug_A <- c(1,0,0,0,0)
drug_A_mg <- c(20,0,0,0,0)
drug_B <- c(0,1,1,0,0)
drug_B_mg <- c(0,10,10,0,0)
drug_C <- c(0,0,0,1,1)
drug_C_mg <- c(0,0,0,5,5)
dat <- data.frame(ID=c(1:5),drug_A,drug_A_mg,drug_B,drug_B_mg,drug_C,drug_C_mg)
drug_name <- c("A","B","C")
index <- matrix(0,nc=2,nr=length(drug_name))
for (i in 1:length(drug_name)){
index[i,1] <- which(colnames(dat)==paste("drug_",drug_name[i],sep=""))
index[i,2] <- which(colnames(dat)==paste("drug_",drug_name[i],"_mg",sep=""))
}
index
index <- data.frame(name=drug_name,index)
index
dim(dat)[1]
dim(index)[1]
index[j,2]
dat[i,index[j,2]]==1
as.character(index[j,1])
dat[i,index[j,3]]
for(i in 1:dim(dat)[1]){
for (j in 1:dim(index)[1]){
if (dat[i,index[j,2]]==1){
dat.dr[i] <- as.character(index[j,1])
dat.mg[i] <- dat[i,index[j,3]]
}
}
}
dat2 <- data.frame(dat$ID,drug_name=dat.dr,drug_mg=dat.mg)
setwd("d:/R_work/CFGL/");
rm(list=ls(all=TRUE));
load("data/expr_bl500.Rdata")
source("R/funs_get_scr_mat.R")
source("R/get_scr_mat.R")
expr[[1]] <- expr[[1]][,1:100]
expr[[2]] <- expr[[2]][,1:100]
expr1=expr[[1]]
View(expr1)
install.packages("roxygen2")
library("devtools")
library("roxygen2")
setwd("d:/R_work/CFGL/");
rm(list=ls(all=TRUE));
library("devtools")
library("roxygen2")
load("data/expr_bl500.Rdata")
source("R/funs_get_scr_mat.R")
source("R/get_scr_mat.R")
expr[[1]] <- expr[[1]][,1:100]
expr[[2]] <- expr[[2]][,1:100]
document()
document()
document()
rnorm
