E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
nt <- rmat[[2]]
gname <- colnames(x[[1]])
rownames(nt) <- gname
colnames(nt) <- gname
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
unlist(lapply(rmat,function(x) sum(x!=0)))
### get r mat
rmat <- theta2rmat(theta)
show_net(rmat[[2]])
show_net <- function(mat,ganme){
nt <- mat
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
}
#####
show_net(rmat[[2]])
nt <- rmat[[2]]
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
###
show_net(rmat[[2]])
show_net <- function(mat,gname){
nt <- mat
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
}
#
show_net(rmat[[2]])
nt <- rmat[[2]]
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
colnames(nt) <- gname
nt <- rmat[[2]]
gname <- colnames(expr[[1]])
colnames(nt) <- gname
rmat <- theta2rmat(theta)
### show newtwork
nt <- rmat[[2]]
gname <- colnames(expr[[1]])
colnames(nt) <- gname
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
show_net(rmat[[2]],colnames(expr[[1]]))
setwd("d:/R_work/CFGL/");
rm(list=ls(all=TRUE));
library("devtools")
library("roxygen2")
library("igraph")
#install_github("Yafei611/CFGL",build_vignettes = T)
library(CFGL)
################################################
theta2rmat <- function(theta,top_edge=NULL,min_edge=0,keep.diag=F, verbose=F){
temp0 <- NULL
temp1 <- NULL
temp2 <- NULL
rmat <- list()
rmat2 <- list()
for (i in 1:length(theta)) {
temp <- diag(theta[[i]])
rmat[[i]] <- -theta[[i]]/sqrt(temp%*%t(temp))
}
if (!is.null(top_edge)){
for (i in 1:length(rmat)) {
temp0 <- rmat[[i]]
diag(temp0) <- 0
temp1 <- c(temp1,abs(as.vector(temp0)))
}
temp1 <- temp1[which(temp1!=0)]
min_edge0 <- temp1[which(rank(-temp1,ties.method = "random")==top_edge)]
if (min_edge0>min_edge) print("Min_edge was overrided")
min_edge <- max(min_edge0,min_edge)
}
if (verbose) print(paste("min_edge is",min_edge))
for (i in 1:length(rmat)) {
temp2 <- rmat[[i]]
diag(temp2) <- 0
temp2[abs(temp2)<min_edge] <- 0
rmat2[[i]] <- temp2
if (keep.diag) diag(rmat2[[i]]) <- diag(rmat[[i]])
}
return(rmat2)
}
get_sp_net_t3 <- function(rmat){
nm <- matrix(0,dim(rmat[[1]])[1],dim(rmat[[1]])[1])
nt <- list()
nt$t1 <- rmat[[1]]
nt$t2 <- rmat[[2]]
nt$t3 <- rmat[[3]]
nt$t1s <- nm;lb <- which((nt$t1!=0)&(nt$t2==0)&(nt$t3==0))
nt$t1s[lb] <- rmat[[1]][lb]
nt$t2s <- nm;lb <- which((nt$t1==0)&(nt$t2!=0)&(nt$t3==0))
nt$t2s[lb] <- rmat[[2]][lb]
nt$t3s <- nm;lb <- which((nt$t1==0)&(nt$t2==0)&(nt$t3!=0))
nt$t3s[lb] <- rmat[[3]][lb]
nt$t12s <- nm; lb <- which((nt$t1!=0)&(nt$t2!=0)&(nt$t3==0))
nt$t12s[lb] <- (abs(rmat[[1]][lb])+abs(rmat[[2]][lb]))/2
nt$t13s <- nm; lb <- which((nt$t1!=0)&(nt$t2==0)&(nt$t3!=0))
nt$t13s[lb] <- (abs(rmat[[1]][lb])+abs(rmat[[3]][lb]))/2
nt$t23s <- nm; lb <- which((nt$t1==0)&(nt$t2!=0)&(nt$t3!=0))
nt$t23s[lb] <- (abs(rmat[[2]][lb])+abs(rmat[[3]][lb]))/2
nt$t123s <- nm; lb <- which((nt$t1!=0)&(nt$t2!=0)&(nt$t3!=0))
nt$t123s[lb] <- (abs(rmat[[1]][lb])+abs(rmat[[2]][lb])+abs(rmat[[3]][lb]))/3
return(nt)
}
get_sp_net_2t <- function(rmat){
nm <- matrix(0,dim(rmat[[1]])[1],dim(rmat[[1]])[1])
nt <- list()
nt$t1 <- rmat[[1]]
nt$t2 <- rmat[[2]]
nt$t1s <- nm;lb <- which((nt$t1!=0)&(nt$t2==0))
nt$t1s[lb] <- rmat[[1]][lb]
nt$t2s <- nm;lb <- which((nt$t1==0)&(nt$t2!=0))
nt$t2s[lb] <- rmat[[2]][lb]
nt$t12 <- nm; lb <- which((nt$t1!=0)&(nt$t2!=0))
nt$t12[lb] <- (abs(rmat[[1]][lb])+abs(rmat[[2]][lb]))/2
return(nt)
}
show_net <- function(mat,gname){
nt <- mat
colnames(nt) <- gname
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
}
################################################
### get the theta
x <- expr
temp <- get_scr_mat(expr1 = x[[1]],expr2 = x[[2]])
scr.mat <- temp$scr.mat
scr.n <- sum(scr.mat)
s.sl <- temp$s
lam1=0.0006
lam2=0.0006
temp = CFGL(expr, lambda1 = lam1, lambda2 = lam2, btc.screening = scr.mat)
theta <- temp$theta
lattice::levelplot(theta[[1]]!=0)
##############################################
### get r mat
rmat <- theta2rmat(theta)
### show newtwork
nt <- rmat[[2]]
gname <- colnames(expr[[1]])
colnames(nt) <- gname
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
###
show_net(rmat[[2]],colnames(expr[[1]]))
### show newtwork
nt <- rmat[[2]]
gname <- colnames(expr[[1]])
colnames(nt) <- gname
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
show_net(rmat[[2]],colnames(expr[[1]]))
rmat <- theta2rmat(theta)
### show newtwork
nt <- rmat[[1]]
gname <- colnames(expr[[1]])
colnames(nt) <- gname
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
show_net(rmat[[2]],colnames(expr[[1]]))
seq(1,dim(mat)[1],1)
show_net <- function(mat,gname=seq(1,dim(mat)[1],1)){
nt <- mat
colnames(nt) <- gname
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
}
show_net(rmat[[2]])
show_net <- function(mat,gname=c(1:dim(mat)[1])){
nt <- mat
colnames(nt) <- gname
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
}
###
show_net(rmat[[2]])
#######
get_top_node(rmat[[1]],topn = 5,gname = colnames(expr[[1]]))
get_top_node <- function(mat,topn,gname){
temp <- rowSums(abs(mat)>0)
names(temp) <- gname
return(sort(temp,decreasing = T)[1:topn])
}
get_top_node(rmat[[1]],topn = 5,gname = colnames(expr[[1]]))
get_top_node(rmat[[2]],topn = 5,gname = colnames(expr[[1]]))
rmat.sp <- get_sp_net_2t(rmat)
rmat.sp <- get_sp_net_2t(rmat)
show_net(rmat[[2]])
show_net(rmat.sp$t1s)
gname <- colnames(expr[[1]])
ganmes
ganme
x <- expr
gname <- colnames(expr[[1]])
gname
show_net(rmat.sp$t1s,gname)
show_net(rmat.sp$t2s,gname)
show_net(rmat.sp$t12s,gname)
rmat.sp$t12s
show_net(rmat.sp$t12,gname)
show_net(rmat.sp$t1s,gname)
show_net(rmat.sp$t2s,gname)
show_net(rmat.sp$t12,gname)
setwd("d:/R_work/CFGL/");
rm(list=ls(all=TRUE));
library("devtools")
library("roxygen2")
library("igraph")
#install_github("Yafei611/CFGL",build_vignettes = T)
library(CFGL)
################################################
theta2rmat <- function(theta,top_edge=NULL,min_edge=0,keep.diag=F, verbose=F){
temp0 <- NULL
temp1 <- NULL
temp2 <- NULL
rmat <- list()
rmat2 <- list()
for (i in 1:length(theta)) {
temp <- diag(theta[[i]])
rmat[[i]] <- -theta[[i]]/sqrt(temp%*%t(temp))
}
if (!is.null(top_edge)){
for (i in 1:length(rmat)) {
temp0 <- rmat[[i]]
diag(temp0) <- 0
temp1 <- c(temp1,abs(as.vector(temp0)))
}
temp1 <- temp1[which(temp1!=0)]
min_edge0 <- temp1[which(rank(-temp1,ties.method = "random")==top_edge)]
if (min_edge0>min_edge) print("Min_edge was overrided")
min_edge <- max(min_edge0,min_edge)
}
if (verbose) print(paste("min_edge is",min_edge))
for (i in 1:length(rmat)) {
temp2 <- rmat[[i]]
diag(temp2) <- 0
temp2[abs(temp2)<min_edge] <- 0
rmat2[[i]] <- temp2
if (keep.diag) diag(rmat2[[i]]) <- diag(rmat[[i]])
}
return(rmat2)
}
get_sp_net_3t <- function(rmat){
nm <- matrix(0,dim(rmat[[1]])[1],dim(rmat[[1]])[1])
nt <- list()
nt$t1 <- rmat[[1]]
nt$t2 <- rmat[[2]]
nt$t3 <- rmat[[3]]
nt$t1s <- nm;lb <- which((nt$t1!=0)&(nt$t2==0)&(nt$t3==0))
nt$t1s[lb] <- rmat[[1]][lb]
nt$t2s <- nm;lb <- which((nt$t1==0)&(nt$t2!=0)&(nt$t3==0))
nt$t2s[lb] <- rmat[[2]][lb]
nt$t3s <- nm;lb <- which((nt$t1==0)&(nt$t2==0)&(nt$t3!=0))
nt$t3s[lb] <- rmat[[3]][lb]
nt$t12s <- nm; lb <- which((nt$t1!=0)&(nt$t2!=0)&(nt$t3==0))
nt$t12s[lb] <- (abs(rmat[[1]][lb])+abs(rmat[[2]][lb]))/2
nt$t13s <- nm; lb <- which((nt$t1!=0)&(nt$t2==0)&(nt$t3!=0))
nt$t13s[lb] <- (abs(rmat[[1]][lb])+abs(rmat[[3]][lb]))/2
nt$t23s <- nm; lb <- which((nt$t1==0)&(nt$t2!=0)&(nt$t3!=0))
nt$t23s[lb] <- (abs(rmat[[2]][lb])+abs(rmat[[3]][lb]))/2
nt$t123s <- nm; lb <- which((nt$t1!=0)&(nt$t2!=0)&(nt$t3!=0))
nt$t123s[lb] <- (abs(rmat[[1]][lb])+abs(rmat[[2]][lb])+abs(rmat[[3]][lb]))/3
return(nt)
}
get_sp_net_2t <- function(rmat){
nm <- matrix(0,dim(rmat[[1]])[1],dim(rmat[[1]])[1])
nt <- list()
nt$t1 <- rmat[[1]]
nt$t2 <- rmat[[2]]
nt$t1s <- nm;lb <- which((nt$t1!=0)&(nt$t2==0))
nt$t1s[lb] <- rmat[[1]][lb]
nt$t2s <- nm;lb <- which((nt$t1==0)&(nt$t2!=0))
nt$t2s[lb] <- rmat[[2]][lb]
nt$t12 <- nm; lb <- which((nt$t1!=0)&(nt$t2!=0))
nt$t12[lb] <- (abs(rmat[[1]][lb])+abs(rmat[[2]][lb]))/2
return(nt)
}
show_net <- function(mat,gname=c(1:dim(mat)[1])){
nt <- mat
colnames(nt) <- gname
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
}
get_top_node <- function(mat,topn,gname){
temp <- rowSums(abs(mat)>0)
names(temp) <- gname
return(sort(temp,decreasing = T)[1:topn])
}
################################################
### get the theta
x <- expr
gname <- colnames(expr[[1]])
temp <- get_scr_mat(expr1 = x[[1]],expr2 = x[[2]])
scr.mat <- temp$scr.mat
scr.n <- sum(scr.mat)
s.sl <- temp$s
lam1=0.0006
lam2=0.0004
temp = CFGL(expr, lambda1 = lam1, lambda2 = lam2, btc.screening = scr.mat)
theta <- temp$theta
lattice::levelplot(theta[[1]]!=0)
##############################################
### get r mat
rmat <- theta2rmat(theta)
### show newtwork
nt <- rmat[[1]]
gname <- colnames(expr[[1]])
colnames(nt) <- gname
lb <- rowSums(nt|nt)!=0
nt <- nt[which(lb),which(lb)]
ntp <- graph_from_adjacency_matrix(nt,weighted = T)
V(ntp)$color = "firebrick1"
V(ntp)$size = 4
V(ntp)$label=V(ntp)$name
V(ntp)$label.cex=0.7
V(ntp)$label.color="black"
E(ntp)$arrow.size =0
E(ntp)$color = "gray60"
E(ntp)$width=1.5
plot(ntp,layout=layout.fruchterman.reingold)
###
show_net(rmat[[2]])
#### check hubness
get_top_node(rmat[[1]],topn = 5,gname = colnames(expr[[1]]))
get_top_node(rmat[[2]],topn = 5,gname = colnames(expr[[1]]))
##################################
##tissue spec
rmat.sp <- get_sp_net_2t(rmat)
show_net(rmat.sp$t1s,gname)
show_net(rmat.sp$t2s,gname)
show_net(rmat.sp$t12,gname)
show_net(rmat.sp$t1s,gname)
show_net(rmat.sp$t2s,gname)
show_net(rmat.sp$t12,gname)
##tissue spec
rmat.sp <- get_sp_net_2t(rmat)
show_net(rmat.sp$t1s,gname)
show_net(rmat.sp$t2s,gname)
show_net(rmat.sp$t12,gname)
get_top_node(rmat.sp$t1s,topn = 5,gname = colnames(expr[[1]]))
get_top_node(rmat.sp$t2s,topn = 5,gname = colnames(expr[[1]]))
remove.packages("CFGL")
setwd("d:/R_work/CFGL/");
rm(list=ls(all=TRUE));
library("devtools")
library("roxygen2")
source("R/funs_get_scr_mat.R")
source("R/get_scr_mat.R")
############
source("R/funs_CFGL.R")
source("R/CFGL.R")
###########
document()
install("../CFGL",build_vignettes = T)
setwd("d:/R_work/CFGL/");
rm(list=ls(all=TRUE));
library("devtools")
library("roxygen2")
source("R/funs_get_scr_mat.R")
source("R/get_scr_mat.R")
############
source("R/funs_CFGL.R")
source("R/CFGL.R")
###########
document()
setwd("d:/R_work/CFGL/");
rm(list=ls(all=TRUE));
library("devtools")
library("roxygen2")
source("R/funs_get_scr_mat.R")
source("R/get_scr_mat.R")
############
source("R/funs_CFGL.R")
source("R/CFGL.R")
###########
document()
install("../CFGL",build_vignettes = T)
